package com.nikita;

public class LL {
//CONSTRUCTUR
    private Node head;
    private Node tail;
    private int size;
    public LL(){
        this.size=0;
    }
   //INSERT PARTICULAR VALUE AT PARTICULAR INDEX
    public void insert(int val,int index){
        if ((index == 0)) {
            insertFirst(val);
            return;
        }
        if(index==size){
            insertLast(val);
            return;
        }
        Node temp=head;
        for(int i=1;i<index;i++){
            temp=temp.next;
        }
        Node node=new Node(val,temp.next);
        temp.next=node;
        size++;
    }
    //INSERT ELEMENT AT LAST
    public void insertLast(int val){
        if(tail==null){
            insertLast(val);
            return;
        }
        Node node=new Node(val);
        tail.next=node;
        tail=node;
        size++;
    }
    //INSERT ELEMENT AT FIRST
    public void insertFirst(int val){
        Node node=new Node(val);
        node.next=head;
        head=node;
        if(tail==null){
            tail=head;
        }
        size+=1;
    }
    //DISPLAY FUNCTION
    public void display(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.value+"->");
            temp=temp.next;
        }
        System.out.println("END");
    }
//CONSTRUCTOR
    private class Node{
        private int value;
        private Node next;
        public Node(int value){
            this.value=value;
        }
        public Node(int value,Node next){
            this.value=value;
            this.next=next;
        }
    }
}





package com.nikita;

public class Main {
    public static void main(String [] args){
        LL list=new LL();
        list.insertFirst(3);
        list.insertFirst(2);
        list.insertFirst(8);
        list.insertFirst(17);
        list.insertLast(99);
        list.display();
        list.insert(100,3);
        list.display();
    }
}
