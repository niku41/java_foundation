//print in range
public class BST3 {
    static class Node{
        int data;
        BST3.Node left;
        BST3.Node right;
    
        Node(int data){
            this.data=data;
        }
    }

    public static Node insert(Node root,int val){
        if(root==null){
            root=new Node(val);
            return root;
        }
        if(root.data > val){
            root.left=insert(root.left,val);
        }else{
            root.right=insert(root.right,val);
        }
        return root;
    }
    public static void inorder(Node root){
        if(root==null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);

    }
    public static Node delete(Node root,int val){
        if(root.data > val){
            root.left=delete(root.left,val);
        }else if(root.data < val){
            root.right=delete(root.right,val);
        }else{
            if(root.left==null && root.right==null){
                return null;
            }
            if(root.left==null){
                return root.right;
            }else if(root.right==null){
                return root.left;
            }
            BST2.Node IS=inorderSuccessor(root.data);
            root.data=IS.data;
            root.right=delete(root.right,IS.data);
        }
        return root;
    }
    private static BST2.Node inorderSuccessor(int data) {
        return null;
    }
    public static Node inorderSuccessor(Node root){
        while(root.left!=null){
            root=root.left;
        }
        return root;
    }
    public static void printInRange(Node root,int X,int Y){
        if(root==null){
            return;
        }
        if(root.data >= X && root.data<=Y){
            printInRange(root.left,X,Y);
            System.out.print(root.data+" ");
            printInRange(root.right,X,Y);
        }else if(root.data >= Y){
            printInRange(root.left,X,Y);
        }else{
            printInRange(root.right,X,Y);
        }
    }

    public static void main(String[]args){
        int values[]={8,5,3,1,4,6,10,11,14};
        Node root=null;

        for(int i=0;i<values.length;i++){
            root=insert(root,values[i]);
        }
        printInRange(root,6,10);
    }
}
