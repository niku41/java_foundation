//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*; 

class GFG{
    public static void main(String args[]) throws IOException { 
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t>0)
        {
            int N = sc.nextInt();
            int M[][] = new int[N][N];
            for(int i=0; i<N; i++)
            {
                for(int j=0; j<N; j++)
                {
                    M[i][j] = sc.nextInt();
                }
            }
            System.out.println(new Solution().celebrity(M,N));
            t--;
        }
    } 
} 
// } Driver Code Ends


//User function Template for Java


class Solution
{ 
    //Function to find if there is a celebrity in the party or not.
    // brut force approach 
    //TC=O^(N)
    int celebrity(int M[][], int n)
    {
    	// code here 
    /*	int count=0;
    	for(int i=0;i<n;i++){
    	    count=0;
    	    for(int j=0;j<n;j++){
    	        if(i==j){
    	            count++;
    	        }else if(M[i][j]==0 && M[j][i]==1){
    	            count++;
    	        }else{
    	            break;
    	        }
    	    }
    	    if(count==n){
    	        return i;
    	    }
    	}
    	return -1;
    	
    */	
    	//TO OPTIMISE CODE TC WE USE STACK APPROACH
    	
    	Stack<Integer>s=new Stack<>();
    	for(int i=0;i<n;i++){
    	    s.push(i);
    	}
    	while(s.size()>=2){
    	    int i=s.pop();
    	    int j=s.pop();
    	    if(M[i][j]==1){
    	        s.push(j);
    	    }else{
    	        s.push(i);
    	    }
    	}
    	int ans=s.pop();
    	for(int i=0;i<n;i++){
    	    if(i!=ans){
    	        if(M[ans][i]==1 || M[i][ans]==0){
    	            return -1;
    	        }
    	    }
    	}
    	return ans;
    }
}
