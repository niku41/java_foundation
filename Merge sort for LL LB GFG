//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

class Driverclass
{
    
    public static void main (String[] args) 
    {
        Scanner sc= new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            Node head = new Node(sc.nextInt());
            Node tail = head;
            while(n-- > 1){
		        tail.next = new Node(sc.nextInt());
		        tail = tail.next;
		    }
		   
		      head = new Solution().mergeSort(head);
		     printList(head);
		    System.out.println();
        }
    }
    public static void printList(Node head)
    {
        if(head == null)
           return;
           
        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
    }
}



// } Driver Code Ends


//User function Template for Java
/*
class Node
{
    int data;
    Node next;
    Node(int key)
    {
        this.data = key;
        next = null;
    }
} */

class Solution
{
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        // add your code here
      /*  if(head==null ||head.next==null){
            return head;
        }
        Node mid=findMid(head);
        
        Node prev=head;
        Node post=mid.next;
        mid.next=null;
        
        prev=mergeSort(prev);
        post=mergeSort(post);
        
        Node ans=merge(prev,post);
        
        return ans;
    }
    static Node findMid(Node head){
        Node turtle=head;
        Node hare=head.next;
        while(hare!=null && turtle!=null){
            turtle=turtle.next;
            hare=hare.next.next;
            
        }
        return turtle;
    }
    static Node merge(Node prev,Node post){
        if(prev==null){
            return post;
        }
        if(post==null){
            return prev;
        }
        Node a=new Node(-1);
        Node temp=a;
        while(prev!=null && post!=null){
            if(prev.data<post.data){
                temp.next=prev;
                temp=prev;
                prev=prev.next;
            }else{
                temp.next=post;
                temp=post;
                post=post.next;
            }
        }
        while(prev!=null){
            temp.next=prev;
            temp=prev;
            prev=prev.next;
            
        }
        while(post!=null){
            temp.next=post;
            temp=post;
            post=post.next;
        }
        a=a.next;
        return a;  */
       /* int n=0;
        for(Node curr=head;curr!=null;curr=curr.next){
            n++;
        }
        int arr[]=new int[n];
        int i=0;
        for(Node curr=head;curr!=null;curr=curr.next){
            arr[i]=curr.data;
            i++;
        }
        Arrays.sort(arr);
        for(Node curr=head;curr!=null;curr=curr.next){
            curr.data=arr[i];
            i++;
        }
        return head;   */
          if(head==null || head.next==null){
            return head;
        }
        Node mid=getMid(head);
        Node righthead=mid.next;
        mid.next=null;
        Node left=mergeSort(head);
        Node right=mergeSort(righthead);
        return merge(left,right);
    }
    static Node getMid(Node head){
        Node slow=head;
        Node fast=head.next;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    static Node merge(Node head1,Node head2){
        Node mergeLL=new Node(-1);
        Node temp=mergeLL;
        while(head1!=null && head2!=null){
            if(head1.data<=head2.data){
                temp.next=head1;
                head1=head1.next;
                temp=temp.next;
            } else {
                temp.next=head2;
                head2=head2.next;
                temp=temp.next;
            }
        }
        while(head1!=null){
            temp.next=head1;
            head1=head1.next;
            temp=temp.next;
        }
        while(head2!=null){
            temp.next=head2;
            head2=head2.next;
            temp=temp.next;
        }
        return mergeLL.next;
    }
}


