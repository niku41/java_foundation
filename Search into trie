//Search in trie

public class TrieYT2 {
    
    static class Node{
        Node[]children;
        boolean endOfWord;

        public Node(){
            children=new Node[26];
            for(int i=0;i<26;i++){
                children[i]=null;
            }
            endOfWord=false;
        }
    }

    static Node root=new Node();

    public static boolean insert(String word){
        Node curr=root;
        for(int i=0;i<word.length();i++){
            int idx=word.charAt(i)-'a';

            if(curr.children[idx]==null){
                curr.children[idx]=new Node();
            }
            if(i==word.length()-1){
                curr.children[idx].endOfWord=true;
            }
            curr=curr.children[idx];
        }
        return true;
    }

    public static boolean search(String key){
        Node curr=root;
        for(int i=0;i<key.length();i++){
            int idx=key.charAt(i)-'a';
            Node node=curr.children[idx];
            if(curr.children[idx]==null){
                return false;
            }
            if(i==key.length()-1 && curr.children[idx].endOfWord==false){
                return false;
            }
            curr=curr.children[idx];  
        }
        return true;
    }

    public static void main(String[]args){
        String words[]={"the","a","there","their","any"};
        for(int i=0;i<words.length;i++){
            insert(words[i]);
        }

        System.out.println(search("the"));
        System.out.println(search("their"));
        System.out.println(search("and"));
    }
    
    
}
    


